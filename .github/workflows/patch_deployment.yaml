name: patch deployment
on:
  push:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      tag:
        description: 'tag to deploy (defaults to latest git tag)'
        type: string
permissions:
  id-token: write
  contents: read
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: main
    - name: Get repository name
      run: |
        ECR_REPOSITORY=$(echo ${{ github.repository }} | cut -d'/' -f2)
        echo "ECR_REPOSITORY=$ECR_REPOSITORY" >> $GITHUB_ENV

    - name: Get version tag for image
      run: |
        echo Checking for valid tag from inputs
        potential_tag=${{ inputs.tag }}
        valid_tag_pattern=^v[0-9]\+[.][0-9]\+[.][0-9]\+$
        if [[ -n "$potential_tag" ]];
        then
          if [[ $potential_tag =~ $valid_tag_pattern ]];
          then
            echo Tag passes pattern check
          else
            echo Invalid input tag: tag does not match pattern
            exit 1
          fi
          if [[ $(git tag -l "$potential_tag") ]];
            then
              echo valid input tag $potential_tag!
              echo "VERSION_TAG=$potential_tag" >> $GITHUB_ENV
              echo "$VERSION_TAG"
            else
              echo Invalid input tag: git tag does not exist
              exit 1
          fi
        else
          echo Defaulting to latest valid git tag.
          VERSION_TAG=$(git tag --sort v:refname | grep '^v[0-9]\+[.][0-9]\+[.][0-9]\+$' | tail -1)
          echo "$VERSION_TAG"
          echo "VERSION_TAG=$VERSION_TAG" >> $GITHUB_ENV
        fi

    - name: Configure AWS credentials for OPS account
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-region: eu-north-1
        role-to-assume: arn:aws:iam::782642133551:role/gha_test

    - name: Check tag version of image
      run: |
        CHECK_VERSION_TAG=$(aws ecr describe-images --repository-name $ECR_REPOSITORY \
          --query 'imageDetails[].[imageTags]' | grep $VERSION_TAG | xargs | cut -d, -f1)

        if [[ -n "$CHECK_VERSION_TAG" ]];
        then
          echo Image to be tagged and put in version is already in version
          exit 1
        fi

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        env=stage
        timestamp=$(date +%Y%m%d%H%M%S)
        STAGE_TAG="$env-$VERSION_TAG-$timestamp"

        echo "Build docker image"
        echo "$REGISTRY/$ECR_REPOSITORY:$VERSION_TAG"
        docker build -t $REGISTRY/$ECR_REPOSITORY:$VERSION_TAG .
        echo "Push docker version image"
        docker push $REGISTRY/$ECR_REPOSITORY:$VERSION_TAG

        echo "Tag docker stage image"
        docker tag $REGISTRY/$ECR_REPOSITORY:$VERSION_TAG $REGISTRY/$ECR_REPOSITORY:$STAGE_TAG
        echo "Push docker stage image"
        docker push $REGISTRY/$ECR_REPOSITORY:$STAGE_TAG